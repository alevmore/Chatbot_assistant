This code implements a comprehensive personal assistant bot in Python, primarily designed to manage and organize a digital address book. It features capabilities to store and manipulate contact details, such as names, phone numbers, and birthdays, making it a useful tool for handling personal contact information efficiently. The program is built on the principles of object-oriented programming and makes use of Python’s standard libraries, such as collections, functools, datetime, and pickle for data serialization.
Key Concepts and Functionality
1.	Class Design and Structure:
o	Field: A base class for attributes like name, phone number, and birthday. It provides a basic framework for storing and comparing field values.
o	Name and Phone: Specialized subclasses of Field. The Phone class includes validation to ensure phone numbers do not exceed a maximum length.
o	Birthday: Another subclass of Field, which converts a string input into a datetime.date object to handle birthday dates.
2.	Contact Records:
o	The Record class represents a contact and stores the person’s name, list of phone numbers, and optional birthday. It provides methods to add, edit, find, or delete phone numbers and add a birthday.
o	The __str__ method gives a human-readable representation of a contact, and the class also supports string-based searches for phone numbers.
3.	Address Book:
o	The AddressBook class extends UserDict to handle multiple Record objects. It includes methods to add, find, and delete records, as well as to retrieve contacts' birthdays that fall within the upcoming week.
o	The get_birthdays_per_week method helps users plan for upcoming birthdays by checking for events occurring within the next seven days and aggregating them based on the day of the week.
4.	Data Persistence:
o	Using the pickle module, the program saves the address book data to a file (addressbook.pkl) when exiting, and loads this data when the program starts, ensuring that the contact information is retained across sessions.
5.	Error Handling and Command Parsing:
o	The input_error decorator is used to catch common errors such as missing input or invalid data formats, providing user-friendly error messages.
o	The parse_input function splits the user input into commands and arguments for easy processing.
6.	User Commands:
o	Users can interact with the bot using commands like:
"add": Add a new contact with a phone number.
"delete": Remove a contact from the address book.
"edit": Modify an existing phone number.
"show_phone": Display the phone numbers of a contact.
"add_birthday": Add a birthday date to a contact.
"show_birthdays": Show contacts with birthdays within the week, organized by the day of the week.
"all": Display all contacts in the address book.
"exit"/"close": Save the data and exit the program.
"hello": A friendly greeting command.
7.	Main Execution Flow:
o	The main function initializes the address book, provides a welcome message, and enters a loop to accept and process user input, making the bot interactive and responsive to various commands.
8. Робота з Docker
Застосунок упакований та розгорнутий у контейнері Docker для зручності використання та забезпечення ізоляції середовища. 
Use Case
This bot can be used as a personal assistant for managing contacts, storing and retrieving information efficiently, and being notified of upcoming birthdays. It is a practical solution for users who prefer a command-line interface for contact management and want an easy way to maintain an address book with the added feature of birthday reminders.
Technologies : Python libraries, Docker, Githab
